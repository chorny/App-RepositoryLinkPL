#!/usr/bin/env perl

use 5.12.0;
use warnings;
no if $] >= 5.018, warnings => "experimental";

#use lib '.';
use App::RepositoryLinkPL;
use App::EUMM::Upgrade 0.25; #find_repo
use Github::Fork::Parent;

my $link = shift;
die "Usage: repositorylink-pl .|github_url\n" unless $link;
my $in_directory = 0;
$in_directory=1 if $link eq '.';

my $me;
my $github_token;
my $editor;

if ($in_directory) {
  (undef, $link) = find_repo('.');
  die "no repository found in ." unless $link;
  $link = convert_url_to_public($link);
} else {
  my $gitconfig = ($^O eq 'MSWin32' ? $ENV{HOMEDRIVE}.$ENV{HOMEPATH} : $ENV{HOME}).'/.gitconfig';
  if (-e $gitconfig) {
    require Config::Tiny;
    my $cfg = Config::Tiny->read($gitconfig);
    if (exists $cfg->{github}{user} && exists $cfg->{github}{token}) {
      $me = $cfg->{github}{user} || die "No user variable in github section in $gitconfig";
      $github_token = $cfg->{github}{token} || die "No token variable in github section in $gitconfig";
    } else {
      die "No github section in $gitconfig";
    }
  } else {
    die "$gitconfig does not exist";
  }

  if (exists $ENV{VISUAL} || exists $ENV{EDITOR}) {
    $editor = $ENV{VISUAL} || $ENV{EDITOR};
  } else {
    if ($^O eq 'MSWin32') {
      $editor = 'notepad';
    } else {
      my @editors = '/usr/bin/nano';
      if ($ENV{DISPLAY}) {
        @editors = ('/usr/bin/gedit', @editors);
      }
      foreach my $p (@editors) {
        if (-e $p) {
          $editor = $p;
          last;
        }
      }
    }
    unless ($editor) {
      die "Editor not found. Set VISUAL or EDITOR environment variables.";
    }
  }
}

my ($author, $repo) = Github::Fork::Parent::parse_github_links($link);
my $github = 0;
if ($author) { #Github repository
  $github = 1;
  $link = "http://github.com/$author/$repo";
}

if ($in_directory) {
  if ($github) {
    my $author1 = github_parent_author($link);
    if ($author1 ne $author) {
      die "Parent is gitpan" if $author1 eq 'gitpan';
      say "true author: $author1";
      $author=$author1;
      $link = "http://github.com/$author/$repo";
    }
  }
  my $res = App::RepositoryLinkPL::process_current_dir($link);
  if (!ref($res)) {
    die "strange result: '$res'" if $res ne 'already';
  } else {
    if ($res->{error}) {
      say "Error: $res->{error}";
    } else {
      say "all ok";
    }
  }
} else {
  die "Cannot extract repository name from $link\n" unless $repo;
  die "directory already present" if -e $repo;
  github_clone($author, $repo) or die "Could not clone $link";
  chdir $repo or die "Cannot chdir to $repo: $!";
  my $res = App::RepositoryLinkPL::process_current_dir($link);
  if (!ref($res)) {
    die "strange result: '$res'" if $res ne 'already';
  } else {
    if ($res->{error}) {
      say "Error: $res->{error}";
      system("$editor $res->{file}");
    } else {
      die "No commit message" unless $res->{commit_message};
      system("$editor $res->{file}");
      say "commit message: $res->{commit_message}";

      my $branch = `git rev-parse --abbrev-ref HEAD`;
      chomp($branch);
      die "HEAD received" if $branch eq 'HEAD';
      die "no branch" unless $branch;
      say "branch: $branch";

      #say "author changed to $author from $author1" if ($author1 ne $author);
      print "actions (c - fork and commit;  p - c&push+pull request;  w - c, wait, push+pull request;  x - exit)?"; #; cx - c and exit
      my $answ;
      while ($answ = <>) {
        chomp($answ);
        my @actions = (qw/c p w x cx/);
        last if $answ ~~ @actions;
      }
      exit if ($answ eq 'x');
      rewrite_remote($author, $repo, $me);
      commit($res->{commit_message}, $res->{file});
      github_fork($author, $repo, $me, $github_token);
      exit if ($answ eq 'cx' || $answ eq 'c');
      if ($answ eq 'w') {
        print "press enter to continue";<>;
      }
      git_push();
      sleep(1);
      require Net::GitHub;
      my $gh = Net::GitHub->new(
          access_token => $github_token,
      );
      $gh->set_default_user_repo($author, $repo);
      my $pull_request = $gh->pull_request;
      my $pull = $pull_request->create_pull( {
        "title" => "Display repository URL on MetaCPAN",
        "body" => "",
        "head" => "$me:$branch",
        "base" => "$branch"
      } );
      say $pull->{html_url};
    }
  }
}


__END__

=head1 NAME

repositorylink-pl - add repository link to Makefile.PL/Build.PL to be published on Metacpan

=head1 SYNOPSIS

repositorylink-pl is a program to add repository link to Makefile.PL/Build.PL,
so it will be published via META.*.
It can clone repository from github, add link, do fork and pull
request or just add link to distribution in current directory
independently from repository type/location.

  repositorylink-pl .

  repositorylink-pl https://github.com/chorny/App-RepositoryLinkPL

=head1 WORK MODES

=head2 repositorylink-pl .

When called with '.' as a first command line argument, it will only add
repository information to Makefile.PL/Build.PL in current directory.
If it is a github repository, it will do a search for parent of this repository
on github in case it is a fork. Program will try to covert URL to public URL,
please send a bug report in case it was done incorrectly.

=head2 github mode

When called with a link to github repository as a first command line argument,
it will clone repository, add link. As regular expressions are used to add link,
program calls editor (VISUAL environment variable, notepad, gedit, nano), so you
can modify code in case it was added to incorrect place. After that program asks
which action to do:

=over

=item

B<p> - Commit changes to repository, do fork on github, push to fork and do a pull request,

=item

B<c> - only fork and commit

=item

B<w> - same as B<p>, but wait before doing push (in case you want to do more commits)

=item

B<x> - exit without doing anything

=back

To do any action on Github, you need to specify github login and token in .gitconfig.
Example:

  [github]
  user = test
  token = 1234567890123456789012345678901234567890


=head1 AUTHOR

Alexandr Ciornii, C<< <alexchorny at gmail.com> >>
